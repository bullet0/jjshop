<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bnsilu.mapper.AuthorityMapper">
	<resultMap type="BnRole" id="bnRoleMap">
		<result property="rPkId" column="r_Pk_Id" />
		<result property="rName" column="r_Name" />
		<result property="rRemark" column="r_Remark" />
	</resultMap>
	
	<resultMap type="BnPermission" id="bnPermissionMap">
		<result property="pPkId" column="p_Pk_Id" />
		<result property="pUrl" column="p_Url" />
		<result property="pRemark" column="p_Remark" />
	</resultMap>
	
	<resultMap type="BnUsersVO" id="bnUsersVOMap">
		<result property="uPkId" column="u_Pk_Id" />
		<result property="uUsername" column="u_Username" />
		<result property="uPhone" column="u_Phone" />
		<result property="uEmail" column="u_Email" />
		<result property="uCreateTime" column="u_Create_Time" />
		<result property="uLastTime" column="u_Last_Time" />
		<result property="uState" column="u_State" />
		<collection property="roles" ofType="BnRole">
			<result column="r_name" property="rName"/>
		</collection>
	</resultMap>
	
	<select id="queryRolesByPage" resultMap="bnRoleMap">
		SELECT 
		  `r_pk_id`,
		  `r_name`,
		  `r_remark` 
		FROM
		  `bnsl`.`bn_role` 
		where 
		   instr(r_name,#{condition})>0
	</select>
	
	<select id="queryRolesByUPkId" resultMap="bnRoleMap">
	SELECT r.`r_pk_id`,r.`r_name`,r.`r_remark` FROM `bn_users` u LEFT JOIN `bn_user_role` ur  ON u.`u_pk_id`=ur.`u_pk_id`
		LEFT JOIN `bn_role` r ON r.`r_pk_id`=ur.`r_pk_id`
	WHERE u.`u_pk_id`  = #{value}
	</select>
	
	<select id="queryPermissionsByRPkId" resultMap="bnPermissionMap">
		SELECT 
		  p.`p_pk_id`,
		  p.`p_url`,
		  p.`p_remark` 
		FROM
		  `bnsl`.`bn_role` r LEFT JOIN `bnsl`.`bn_role_permission` rp ON r.`r_pk_id`=rp.`r_pk_id` 
		  LEFT JOIN `bnsl`.`bn_permission`  p ON p.`p_pk_id`=rp.`p_pk_id`
		WHERE r.`r_pk_id`=2
	</select>
	
	<select id="queryPermissions" resultMap="bnPermissionMap"> 
		SELECT 
		  `p_pk_id`,
		  `p_url`,
		  `p_remark` 
		FROM
		  `bnsl`.`bn_permission` 
	</select>
	
	<select id="permissionsByPage" resultMap="bnPermissionMap">
		SELECT 
		  `p_pk_id`,
		  `p_url`,
		  `p_remark` 
		FROM
		  `bnsl`.`bn_permission` 
	</select>
	
	<select id="queryPermissionsByUPkId" resultMap="bnPermissionMap">
		SELECT p.`p_pk_id`,p.`p_url`,p.`p_remark` FROM `bn_users` u LEFT JOIN `bn_user_role` ur  ON u.`u_pk_id`=ur.`u_pk_id`
			LEFT JOIN `bn_role` r ON r.`r_pk_id`=ur.`r_pk_id`
			LEFT JOIN `bn_role_permission` rp ON rp.`r_pk_id`=r.`r_pk_id`
			LEFT JOIN `bn_permission` p ON p.`p_pk_id`=rp.`p_pk_id` 
		WHERE u.`u_pk_id`  = #{value}
	</select>
	
	
	<select id="queryUsersByPage" resultMap="bnUsersVOMap">
		SELECT 
		  u.`u_pk_id`,
		  u.`u_username`,
		  u.`u_phone`,
		  u.`u_email`,
		  u.`u_create_time`,
		  u.`u_last_time`,
		  u.`u_state`,
		  r.r_name
		  
		FROM
		  `bnsl`.`bn_users` u LEFT JOIN  `bn_user_role` ur ON u.`u_pk_id`=ur.`u_pk_id`
				LEFT JOIN `bn_role` r ON r.`r_pk_id`=ur.`r_pk_id` 
		WHERE INSTR( u.u_username , #{condition} )>0
	</select>
	
	<delete id="deleteRoleByUPkId">
		DELETE  FROM `bn_user_role` WHERE u_pk_id = #{uPkId}
	</delete>
	
	<delete id="deletePermissionByRPkId">
		DELETE 
		FROM
		  `bnsl`.`bn_role_permission` 
		WHERE `r_pk_id` = #{rPkId}
    </delete>
	
	<delete id="deleteRole">
		DELETE 
		FROM
		  `bnsl`.`bn_role` 
		WHERE `r_pk_id` = #{rPkId}
	</delete>
	<delete id="deletePermissionByPPkId">
		DELETE 
		FROM
		  `bnsl`.`bn_permission` 
		WHERE `p_pk_id` = #{value}
	</delete>
	
	<delete id="deletePermissions">
		DELETE 
		FROM
		  `bnsl`.`bn_permission` 
		WHERE `p_pk_id` in 
			<foreach collection="list" open="(" close=")" item="item" separator=",">
					#{item.pPkId}
			</foreach>
	</delete>
	
	
	
	<delete id="deleteRoles">
		DELETE 
		FROM
		  `bnsl`.`bn_role` 
		WHERE `r_pk_id` in
			<foreach collection="list" open="(" close=")" item="item" separator=",">
					#{item.rPkId}
			</foreach>
	</delete>
	
	
	<insert id="insertRoleByUPkId">
		<if test="roles != null and roles.size() > 0">
			insert into `bn_user_role` values 
				<foreach collection="roles" item="item" separator=",">
					(#{uPkId},#{item.rPkId})
				</foreach>
		</if>
	</insert>
	<insert id="insertPermissionByRPkId">
		<if test="permissions != null and permissions.size() > 0">
			insert into `bn_role_permission` values 
				<foreach collection="permissions" item="item" separator=",">
					(#{rPkId},#{item.pPkId})
				</foreach>
		</if>
	</insert>
	
	
	<insert id="insertPermission">
		INSERT INTO `bnsl`.`bn_permission` ( `p_url`, `p_remark`) 
		VALUES
		  (#{pUrl},#{pRemark})
	</insert>
	
	<insert id="insertRole">
		INSERT INTO `bnsl`.`bn_role` (`r_name`, `r_remark`) 
		VALUES
		  (#{rName},#{rRemark})
	</insert>
	
	<update id="updateRoleByRPkId">
		UPDATE 
		  `bnsl`.`bn_role` 
		SET
		  `r_name` = #{rName},
		  `r_remark` = #{rRemark} 
		WHERE `r_pk_id` = #{rPkId} 
	</update>
	
	<update id="updatePermissionByPPkId">
		UPDATE 
		  `bnsl`.`bn_permission` 
		SET
		  `p_url` = #{pUrl},
		  `p_remark` = #{pRemark} 
		WHERE `p_pk_id` = #{pPkId} ;
	</update>
	
	<update id="updateUserState">
		UPDATE 
		  `bnsl`.`bn_users` 
		SET
		  `u_state` = #{uState} 
		WHERE `u_pk_id` = #{uPkId}
	</update>
	<update id="updateUserInfo">
		UPDATE 
		  `bnsl`.`bn_users` 
		SET
		  `u_username` = #{uUsername},
		  `u_phone` = #{uPhone},
		  `u_email` = #{uEmail}
		WHERE `u_pk_id` = #{uPkId}
		
	</update>
</mapper>