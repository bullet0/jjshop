<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

       <!-- 设置登录表单提交时用户名密码的名字  -->
       <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
              
       </bean>

       <!-- 自定义的过滤器，目的是为了登录之后将用户信息放入session作用域 -->
       <bean id="userSessionFilter" class="com.bnsilu.filter.UserSessionFilter"/>
       <!-- Shiro 的Web过滤器,id为filter中配置的targetBeanName -->
       <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
              <property name="securityManager" ref="securityManager" />
              <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证
                     不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面
              -->
              <property name="loginUrl" value="/login/login.action" />
              <!-- 登录验证成功后，如果之前有访问过页面，session会保存下来，跳转到之前访问的页面，
                     如果session中没有保存的路径，也就是之前没有访问过路径，则跳转此页面 -->
              <property name="successUrl" value="/login/success.action" />
              <!-- 权限验证不通过时跳转哪个页面，没有权限的展示页面 -->
              <property name="unauthorizedUrl" value="/refuse.jsp" />
              <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
              <property name="filterChainDefinitions">
                     <value>
                            <!--静态资源匿名访问-->
                            /js/**  =  anon
                            /image/**  =  anon
                            /css/**  =  anon
                            <!--注册页面匿名访问-->
                            /register.jsp  =  anon
                            /login/register.action  =  anon
                            <!-- 修改密码  -->
                            /pages/changePwd.html = anon
                            /login/checkNameRepite.action = anon
                            /login/resetPwd.action  =  anon
                            <!-- 获取验证信息 -->
                            /login/a48Af.action = anon
                            <!--登录页面匿名访问-->
                            /pages/index.html = anon
                            /login/login.action = authc
                            <!-- 登出拦截器 -->
                            /login/logout.action = logout
                            <!-- 权限拦截器
                            /user/query.action = perms[user:insert]
                            /user/update.action = perms[user:update]
                            -->
                            <!--其他所有页面全部需要权限-->
                            /** = authc,userSession
                     </value>
              </property>

              <!-- 在ShiroFilterFactoryBean的filters中加入 -->
              <property name="filters">
                     <util:map>
                            <entry key="userSession" value-ref="userSessionFilter"/>
                            <entry key="authc" value-ref="userFormAuthenticationFilter"/>
                     </util:map>
              </property>
       </bean>
		
		<bean id="userFormAuthenticationFilter" class="com.bnsilu.filter.UserFormAuthenticationFilter">
			  <!-- 配置表单中账号的input名称 -->
              <property name="usernameParam" value="uUsername"/>
              <!-- 配置表单中密码的input名称 -->
              <property name="passwordParam" value="uPassword"/>
		</bean>
		

       <!-- 安全管理器  注入到filter中-->
       <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
              <property name="realm" ref="userRealm" />
              <property name="cacheManager" ref="shiroEhcacheManager"></property>
              <property name="sessionManager" ref="sessionManager"></property>
       </bean>

       <!-- 凭证匹配器 ，MD5加密     org.apache.shiro.authc.credential.HashedCredentialsMatcher-->
       <bean id="credentialsMatcher" class="com.bnsilu.macher.RetryLimitHashedCredentialsMatcher">
              <property name="hashAlgorithmName" value="md5"></property>
              <property name="hashIterations" value="5"></property>
       </bean>

       <!-- 自定义 realm 注入到安全管理器 -->
       <!-- 需要将凭证匹配器配置到自定义reaml中 -->
       <bean id="userRealm" class="com.bnsilu.realm.UserAuthenticationRealm">
              <property name="credentialsMatcher" ref="credentialsMatcher"></property>
       </bean>

       <!-- 第一种shiro自带的缓存：shiro缓存管理器 注入到安全管理器
       <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
              <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
       </bean>
 		-->
       <!-- 第二种：spring缓存管理器  --> 
      

       <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
              <property name="configLocation" value="classpath:ehcache.xml"></property>
              <property name="shared" value="true"></property>
       </bean>
        <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" >
              <property name="cacheManager" ref="ehcacheManager"></property>
             
       </bean>
       
       <!-- session会话管理器 -->
       <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
              <!-- session的失效时长，单位毫秒 -->
              <property name="globalSessionTimeout" value="300000"/>
              <!-- 删除失效的session -->
              <property name="deleteInvalidSessions" value="true"/>
       </bean>

       

</beans>